MKSA
M=メートル
K=キログラム(Kg)
S=セカンド(秒)
A=アンペア
プログラムはこれで考えられていることが大多数

多くのCADソフトはcm単位

CG用語
ハイトマップ:高さマップ
	→ディスプレイスメントマップ
　　　	　　ノーマルマップと違って、「実際の高さを変える」
	　　　→頂点数がめちゃくちゃ必要

	　　　DirectX11から搭載されている機能の中に
	　　　「テッセレーション」というものがある。
	　　　	GPU上で動的に面を分割するもの
		UEやUnityではこれを用いてディスプレイストマッピングを行っている。


ゲーム会社やCGの会社など、クリエイティブ系は感性でやってるイメージですが、専門知識がめちゃくちゃいります
とにかく用語の意味は把握しておいたほうがいい。

ハイトマップは通常白黒データでできています
黒が低くて白が高い
黒は0、白は1を表します(内部的には0～255)を用いる
高さが0～1に正規化されている。

最初に最大高さを決めて、あとは
auto Y = heightvalue * MAX_HEIGHT

実際にどうするのか、まず細かいメッシュを作ります。
このメッシュをゴムみたいに伸び縮みする絨毯だと考えます。
この絨毯の左上をuvの0、0と見立てて、右下をuvの1、1に見立てます

頂点にかかわる概念として「プリミティヴ」というのがあります
これは、頂点から構成される、目に見えるものという意味です
「トポロジー」というのは、数学の分野の一つで「つながりに着目したもの」
つながりによる「かたち」OR「かたちによるつながり」を重視したもの
□も〇も△も同じ

プリミティブトポロジー(PrimitiveTopology)は何かというと、
基本図形の構成と
そのつながりについて、指定するものです。

POINTLIST：1点1点が独立
LINELIST ：2つ一組で一つの線
LINESTRIP:最初の2点はLINELISTと同じですが、それ以降は、点が一つ増えるたびに
	　n-1とつなげて線を作る
TRIANGLELIST:3点一組で一つの三角形
TRIANGLESTRIP:最初の3点はTRIANGLELISと一緒、それ以降は、点が一つ増えるたびに、
	　n-1,n-2とつなげて三角形を作る

STRIPのほうを使うと頂点数を減らせるという利点があります。
例えばクアッドポリゴン(Quad-Polygon四角形ポリゴン)を
構成する場合には三角形二つなので６頂点必要
STRIPなら４点で済む。

ただし、STRIPは一筆書きできる必要があります。
普通のモデルには使用できません。あと、縦m横nに分割
された平面にすら使えません。

格子状のものすらSTRIPに向いていません。
LISTでかつ頂点数を減らせないか？→頂点インデックス
たいていのメッシュモデルでは、頂点リストとインデックスがセットになっている。

インデックスって何ですか？頂点を再利用するために
前提として頂点は配列として格納されている。
インデックスはこの配列の番号を並べることで、ポリゴンを形成する。

indexes
indexes={0,1,2}

DxLibでいうと、Indexedが中に入っているのは、この
インデックスが情報も渡さないといけない

配列番号が前後するつくりだと、バグりやすい
なので、順番になってる前提なら、内部でインクリメント用
変数を作って、処理のたびに＋＋する

レイマーチングについて…
レイトレーシングに似ているが、形の作り方が全然
違う。

偏微分から法線を求める方法
「ちょっとずらして値を求めて、そこから「勾配」を計算」
勾配が求められる。
いったん2D画像になったものでも、その中の値から
勾配が求められる。

深度値が欲しいのですが、DxLibは深度値を公開していない。
でも深度が欲しい→色情報に変換して、別で深度を書き込んでおく
ただし、色情報は通常R8G8B8なので、最大値255しかない。これを深度にするには
ちょっと心もとない
SetCreateGraphColorBitDepth

DxLibのシェーダは3Dを扱うときは、ちょっとだけ注意が必要で
中の定数バッファーとかが変にいろいろ予約されてて、かつ変な使い方を
されてる。

微分
f(x) = x^2+2x+1
f'(x) = 2X+2

lim (f(x + h)-f(x)) / (x+h-x)

プログラミングにおける「グラフ」もつながりに着目したものですが、
①リンク
②ツリー：(さかのぼると最終的に必ず一人の親に行き着く「ルート」という)
③グラフ：親とかじゃなく、それぞれのノードが並列的につながっている
	広域ネットワークが近い概念(送電線もそう)

頂点とインデックスの関係について



















