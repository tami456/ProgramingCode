マルチレンダーターゲット
ピクセルシェーダの出力先は一つではない。

HLSL　セマンティクスで検索すると
シェーダのセマンティクスという項目が出てくる。
Semantics(意味論)

CPU→GPU
VS→PS
というやり取りは、実はただのバイト列でしかない
なので、渡されたデータ(大きさと順序)に対して
「意味」を付加してあげる必要がある

DxLibで使用するセマンティクスは
HLSL　セマンティクスで出てくるページで十分(これしかない)。

するといろいろ出てくる。
読み方を示しておくと
POSITION[n]
こういうのが書かれているが、これはこのPOSITONセマンティクスのものが
複数ある場合に番号が付くことを示しています。
一つだけならPOSITIONと何も書かなくてOK
複数あるなら
POSITION0
POSITION1
POSITION2
こんな風に後ろに数値をつけていきます。

もう一つ重要なもの…頭にSV_がついているもの。
これはSystemValueの略で、これがついていると、少し
気を付ける必要があります。(使われ方が決まっている)
SV_POSITION→この値がラスタライザにわたってこの値を
	もとにピクセルが塗りつぶされる(頂点シェーダで使う)
SV_TARGET→色を返す。出力マージャに渡されて、
	この色で塗りつぶそうとする。
	
実はSV_TARGETはSV_TARGET[n]という風に宣言されており
複数出力が可能

RenderTarget→ピクセルシェーダの書き込み先
GPU上では、RenderTargetにしか書き込みできない

ぼかしは重い←何故
テクスチャフェッチ数が膨大になるから
Fetch(必要な情報を探して持ってくる)
テクスチャフェッチ→tex2D.Sampleのことです
ぼかしの場合、せいぜい周辺25ピクセルくらいをぼかしに利用します。

もっとも簡単なぼかし←平滑化フィルタ
通常のピクセルがこうだとする
000
010
000
平滑化フィルタをかけると
1/9 1/9 1/9
1/9 1/9 1/9
1/9 1/9 1/9
全部合わせて1になる

121
242
121
÷16


12421
24842
81632168
24842
12421

例えば、この場合1ピクセルのぼかし色をとってくるために
最大25ピクセルテクスチャフェッチが必要になる
















