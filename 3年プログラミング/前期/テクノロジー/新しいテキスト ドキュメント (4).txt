グラフィックスプログラマでなくともシェーダかけるように
なっておいてほしい
①グラフィクス関係しないことがほとんどないから
②最近はほかの分野でもGPUパワーを使うので
シェーダの仕組み自体は理解しておいてほしい
最近は単純に「計算」のためのGPUプログラミングをする
・物理
・パーティクル
・AI
・サウンド

③ゲームエンジンを使うにしてもグラフィックスパイプラインの理解は必要

DxLibで(特に頂点)をいじるときは、注意が必要です
「頂点レイアウト」ていうのがあります。
頂点1個にたいしてどれくらいの情報が含まれているか情報
例えば、
座標・法線・色(ディフューズ・スペキュラ・アンビエント)
・UV・UV2
この辺を本来は自分で定義します。何バイト目が何？とか

本来は、CPU&RAMとGPU&VRAMは独立して動いている
RAMの内容をGPUは知ることができないし、VRAMの内容をCPUは知ることができない

モデルを画面に表示するまで…
モデルデータ(頂点の塊)：ストレージ
→メモリ(RAM)にロードします。
DMA等の仕組みを使って、RAMからVRAMへ転送します。
VRAMに転送されて初めて、GPUが頂点情報を利用できる。

転送するときは、ただのバイト列です。
解釈の仕方も教えないといけない→この解釈を頂点レイアウトといいます。
本来は自分で決めるものです。ですが、DxLibではここが固定になっています
(決めてくれています)

全部で4種類くらいあります。(マニュアルの説明が少し古いので役に立たない)

TANGENT:もともとTANGには触れるという意味があり、TANGENTは接戦という意味
接戦ベクトル


外積：A×B(クロス積)cross
2D
A・B=ax*bx+ay*by=|A||B|cosθ=スカラーfloat1
A×B=ax*by-ay*bx=|A||B|sinθ=スカラーfloat1

3D
A・B=ax*bx+ay*by+az*bz=スカラーfloat1
A×B=(ay*bz-az*by,az*bx-ax*bz,ax*by-ay*bx)=ベクトルfloat3

(A×B)⊥A、(A×B)⊥B
A×B=-(B×A)

BINORMAL：従法線ベクトル=N×T

①(線形代数＝ベクトル＆行列)
②微分積分
③確率統計
ゲームに必要な基礎

lim_h→0 (f(x+h)-f(x))÷h











