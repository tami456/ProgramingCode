①乱数とノイズ
②CG科と連携するための用語について

乱数
rand()は乱数の精度は低いです
	アルゴリズムは線形合同法
	→パターンが出てしまう
	次が予測不能であることを保証する必要がある場合は
	rand()は使わないほうがいい
	通常はガチャでは使わない
	アクションやシューティングの乱数としては使う
	
	乱数の幅を決めるときにrand()%nのような
	方法で
	m～m+nの範囲の乱数を出力できるが、これも
	精度まで考えるとよくない(偏りが出ちゃう)
	
→何に使えばいいのか
	mt19973
	xorshift
	等を使う
	あと、基本的に乱数生成は、前の値に依存するため
	マルチスレッドの時には気を付けよう。
	
	範囲を決めるには、uniform_int_distribution
	uniform_real_distributionを使用する。。
	
実数(real)＝不動小数点を含む

虚数(imaginary)
複素数(complex);実数と虚数が混ざったやつa+b

メルセンヌついスタ：乱数アルゴリズムの一つ

std::mt19937 mt;
std::uniform_int_distribution<> uid(100,200);
std::uniform_real_distribution<float> urd(100,200);

cout << uid(nt) << endl;

モンテカルロ法の時も乱数の精度は高いほうがいいため
こちらを使ったほうがいい。

乱数はランダムシードと言って、乱数数列のX_0最初の値に
あたるものです(数値としては登場しません)。数値としては
X_1から登場します

C言語の時は
srand(GetTickCount());
等のようにして、起動時に予測しづらい値を初期値として
食わせてた

これも、絶対予測不能なrandom_device()を使用する
→PC内部のノイズなどを利用する
PC内部のノイズは極端な話、宇宙線まで影響する
これこそ本当のランダムで予測不可能

ただし、すごく重いため、実用としては起動時に1回だけ
random_deviceで初期値を設定して、あとはmt19973

みなさんがHLSLでノイズを使おうとしたときはxorshiftを使ったほうがいい
ノイズの種類
セルラーノイズ、パーリングノイズ

②CG科との用語の統一

古典的レンダリング
ディフーズ、スペキュラ、アンビエント
物理ベースレンダリング(Albedo(BaseColor))
	Albedo：白色光を当てた時に帰ってくる色
	Rougphness(1-smoothness):表面のざらつき具合
	Metalic:金属と非金属の反射の仕方がそもそも違う
	金属の特徴：光があまり中まで入らない
				非金属の場合だと、サブサーフェスといって、表面を
				突き抜けて中に入って、反射する(反射ポイントがずれる)
			金属の反射は、ちょっと面倒くさい。金属原子に光子があたると
			エネルギーが内部的に励起して電子が飛び出す。この時の
			エネルギーが「反射光」として見えている。この時に金や銀の場合は
			波長が変わってしまうため、独特の色が出ることになる。
		
		→あまり入射光に依存しない光が帰る
	スペキュラ：表面で完全に反射する光。
	
反射を表現する…って話なんですが、PBRにしたからといって、反射が
	リアルっぽく見えるわけではない、何かが足りない。
	IBL(イメージベース度ライティング)が重要な要素になっている
	周囲から入ってくる光をImageBasedLightingとして表現する
	→環境マッピング
	360°カメラで撮った内容を物体表面に張り付けると、周囲光が反射
	してるように見える
	
	これと、ラフネスが関係している。ラフネスが上がると、IBLがだんだんぼけてくる
	このとき、IBLをデザイナーさんに用意してもらうときは少し注意点がある。
	
	おそらくexeファイルで用意されると思いますが、DxLibでは読めません。
	デザイナーさんはHDRI形式って言って、exrという拡張子でくれると思います
	これは使えない。
	
	変換してもらう必要があります。
	おそらくゲームエンジンを使うと変換できるかなと思いますが
	実際は、各自検索してもらうと以下と思います。
	
	
	ここでは、DxLibで環境マップを使うには、どうしたらいいのか
	の話をします。PNG,JPG,DDS
	できればDDSファイルにしたほうがいい
	
	ちなみにゲームで使われる環境マップには2種類あります
	①スフィアマップ
	②キューブマップ(これがスタンダード)
		ミップマップで数段階作っておく
		
	
	ミップマップ
		買いz黄土を落とした画像を事前に用意しておく
		→つまりボケている
			これをごうせいすることで、ラフネス値0～を表現できる
			ラフネス値なら、一番大きいマップを使用して