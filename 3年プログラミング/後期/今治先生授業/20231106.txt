保守…ゲームのバグとか直す人

解放閉鎖原則
・クラスは拡張性に開放され、修正に閉鎖されるべきである…
	バグは直すけど、変更が入っても修正が入らないようにする
	・継承しよう
	
繰返禁止原則
・共通する事柄を抽出し、一か所にまとめることで、コードの重複を防ぐ…
	無駄なコードを書かずに済む
	ポリモフィズム

単一責任原則
・システム内の是の部ジェクトは単一の責任を負い、オブジェクトのあらゆるサービスは、その単一の責任を遂行
することに集中すべきである。

リスコフ置換原則
・子クラスは親クラスと置換可能でなければならない

継承しなくていい時はしない
・継承は相互クラス同士の依存関係が強い
	密結合
・アーキテクチャとしては、オブジェクト同士の依存関係は弱いほうがいい
	独立して存在しているということ
	疎結合

継承よりも…
委譲…ほかのクラスの機能を使用しないといけないけど変更する必要はない
コンポジション…ほかの振る舞いから構成されているオブジェクトが振る舞いを所有する
オブジェクトから破棄されると振る舞いも破壊される。
コンポジション内の振る舞いはコンポジションの外では存在できない
コンポジションによって、クラス群から、振る舞いを使用し、実行時に振る舞いを決定することが可能になる。
集約…突然終了することのないコンポジション
あるクラスが別のクラスの一部として使用されるが、そのクラスの外でも存在するとき、それらのクラスの間の
を利用するほうが通常はソフトウェアが柔軟になり、保守、拡張、再利用が容易になる。



プロジェクトのライフサイクル
ウォーターフォールモデル
設計から実装、テストまで

プロトタイピング
試作

スパイラルモデル


アジャイルモデル
アジャイルとウォーターフォール

Vモデル
設計とテストがあっているか調べる