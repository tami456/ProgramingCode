オブジェクト指向分析設計実践
・フィーチャーを上げ、一覧にする
フィーチャー…特徴や大切なこと
顧客(それを使いたい人)の言葉で書くようにする
・ユースケースを上げ、ユースケース図にする
ユースケース…使い方
ユースケース…外部起動者が関与するケース(コマンドを選択した、ボタンを押したなど)
手順についてはとりあえずは問わない
・問題を分割する
アプリケーションの問題をモジュールに分割する
・要件
取り組む要件を明らかにし、全体像に合致することを確認する
・ドメイン分析
ユースケースとアプリケーション内のオブジェクトを対応付け、
顧客と同じ考えであることを確認する。
・初期設定
・実装



・ユースケース駆動開発とフィーチャー駆動開発
どちらも開発の起点とするにはふさわしい
・ユースケース駆動開発
ユースケース全体にまたがるシナリオを選択し、そのシナリオを実現するコードを作成する
	・比較的小さな課題を解決するときはユースケース駆動開発を検討すべき
代表的な開発技法
	・アジャイル
可能性のある開発技法
	・ウォータフォール
	・スパイラル
・フィーチャー駆動開発
アプリケーション内の具体的なフィーチャーを選択し、計画分析開発を行って完成させる
	・顧客が結果を早く見たがっているときはフィーチャー駆動開発を検討すべき



ユースケース
ユースケースの3要素
・明確な価値
	どのユースケースも、システムに対し、明確な価値を持たせなければならない
	顧客目標の達成に役立たないユースケースは無意味
・開始条件と終了条件
	どのユースケースも、明確な開始地点と終了地点が必要。
	何かがプロセスを開始し、そのプロセスの官僚を示す条件がどこかに存在しなければならない
・外部起動者
	どのユースケースもシステムの外にいる、外部起動者によって開始されなければならない
	起動者は人である場合もあれば、システムの外部にあるほかの何かである場合もある。

・ユースケースは外部起動者が関わるシナリオが描けること。

・分析手順
	対象となるユースケースのシナリオを描きだす
	・箇条書きにする
		フローチャートは使わない
		形容詞、形容動詞は使わない
	・まず、すべてうまくいった場合のシナリオを描く
		メインパス(ハッピーパス)
	・うまくいかなかった時に代替処理は詳細事項として書く
		サブパス(代替パス)
	シナリオを分析する(ドメイン分析)
	・名詞を抜き出す
		日本語の問題
			名詞句にも着眼する
			○○するとなっている時、○○は名詞ではなく、動詞
		名詞はクラスと変数の候補
			クラス
			プロパティ
	・動詞を抜き出す
		動詞は振る舞いや機能の候補
			メソッド
	テストシナリオを作成し、実施する
		テスト駆動開発

フィーチャー
分析手順
対象となるフィーチャーを分析する
・取り上げるクラスを決める
クラスを肉付けする
テストシナリオを作成し、実施する
・テスト駆動開発

ユニットごとにプロパティがある
