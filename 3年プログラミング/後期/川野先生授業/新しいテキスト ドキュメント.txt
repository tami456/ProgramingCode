PAD対応がなぜ重要か
	→ちゃんとユーザー目線になってるのかをみられる
	対応するしないはともかく入力マッピング
	ハードウェアの入力とゲーム命令の間に
	ワンクッションを挟むことによって、依存度を低めて
	柔軟性が高まります。
	
	違いを吸収するために必要


mapとunordered_mapの違い
→並び(アルゴリズム)の違いです
mapは中身が木構造になってて、整列させられる。
これによって、キーと合致する値を高速に見つけられる
(赤黒木というので実装されています)

これに対してunordered_mapは、ハッシュ関数によって
内部的にハッシュ値が計算され、それによって配列のように
並べられています。
いわゆるはっしテーブルができているため、文字列を
キーとしている場合ｍこの文字列からハッシュ値を生成し
それをもとに場所を特定する。配列番号で探してるような
ものなので、通常のmapよりも早い。ただし順序は
人間がわかる順番になってないため、順序は保証されない。

理想的なオーダーの話をすると
mapは(logN)
unordered_mapは0(1)

別名としてのusingを使いこなしてほしいです

using A = 型名;
これはAが型名の別名になる。

よく使うのは
①長すぎる型名を一言で
	std::unordered_map<std::string,std::vector<std::function>>
	なんて毎回書きたくないので、
	using InputNameTable_t = std::unordered_map<std::string,
	using InputNameTable_t = InputNameTanle_t>
②わかりづらい型名をわかりやすく


①登録されているキー情報を列挙する
②問答無用で書き換えるのではなく、現在選択中の入力のみ
書き換えるようにする
③ロールバックできるようにする
④コミットできるようにする
