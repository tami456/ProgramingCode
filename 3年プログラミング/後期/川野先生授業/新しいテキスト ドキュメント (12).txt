①ポリモーフィズム
②Stateパターン
③シングルトン(コピー禁止)
④constの使い方(const関数const引数const)
⑤

tuple…pairの親戚みたいなもの
pair<T1,T2>の固定2つでしたが、
tupleはtuple<T1,T2,T3..>のような感じで
複数の方の組み合わせを持てる

そもそもスマートポインタとは、deleteしなくても済む仕組み
基本的には、C++においてはnew,deleteを書かなくていいように
なっている。
①スマートポインタの登場
②STLが早くなったので、動的配列もvectorなどで済むようになった

std::vector<Slime*> ints;
ints.push_back(new SLime);
こんな風に書くと、ints.clear()ってやった時点で
団ぐリングポインタとメモリリークが発生します。
なので、基本的にここも
std::vector<shared_ptr<Slime>> ints;
ints.push_back(make_shared<Slime>());
という風にしておけば、
ints.clear()
と同時に、内部のポインタが指し示しているアドレスも解放される。

動的配列も
int* a = new int[n];
delete[] a;←こうしないといけなくなる

こんなややこしいのを使うよりかはvectorを使ったほうがいい
これらのことから、new deleteは実はほぼほぼ使われていません。

では、new、deleteを忘れていいのかというと、実はそうではない
実はnewとdeleteは「演算子」なのです。

つまり、operator newやoperator deleteでnewとdeleteの動作を再定義できる

メモリの確保は、OSにお伺いを立てます。
つまり、mallocやnewをするたびに、OSコールのオーバーヘッドがかかります。
そこで、newやdeleteが改造されることがあります。
よくあるのが、アプリケーション開始時に広大なmallocを行っておいて
newはその確保したアドレスから取得する。メモリマネージメントは自分でやる。
あと、この手のことをやる仕組みは、実は専門で存在して、それは
placement newと呼ばれるやつで「特定の確保済みアドレスをnewに割り当てる」
という仕組みもあります。

ゲームの「システム系」に行きたい場合↑

「ゲームプログラミングにおいて「システム」と言ってしまうと」
①OSとのやり取り部分
	メモリの確保、解放、ファイル読み書き
②I/Oの部分
	コントローラー入力、ログ出力

この辺になるので、ちょっと気を付けましょう

大半の「ゲームのシステムやりたい」という人は、「ゲームルール部分」
自分が何をやりたいのかというのを把握しておきましょう。

では「ゲームルール部分やりたいです」といえばいいのか？
ゲームルール自体は作る専門の人がいる→プランナー

ここでプログラマの仕事は、プランナーの仕様書をもとに、ゲームルールを
プログラムに組み込んで実際の挙動に落とし込んでいく
なんですが、これも、プランナーがBPくらいは扱えるので、この部分の
プログラマの仕事は
①C++じゃないと実現できない機能
②BPだと非効率なものを実現


とはいえ実際の話
①システム
②グラフィック
③サウンド
④UI
⑤物理
だけでできているわけでもない

イベントに対する処理等こまごましたものもプログラマが実装する
この辺を明確に指す言葉がない

あとはゲームの遷移等

質問「うちに入って何がやりたい？」
→細かい職種
→どういう技術を伸ばしていきたいのか
	→じゃあ、今君がやってることと、どうつながるのか
	
実際に発売されてるゲームのことをもとにして言う手もいい
	この時に、自分なりに分析しましょう。

会社に入るまではみんな「お客さん」
入ったら、提供する側です。これの自覚を持とう
既存のゲームの改善点を見つけ、解決策も考えるというところまで想像しよう。

プログラマも意識すべき点として「ユーザビリティ」があります。
見た目の向上←グラフィクス
レスポンスの向上←システム(入力のフレーム内にキャラグラに反映)
レスポンスの向上②←ネットワーク(いかにパケット数を減らすか)
					→ビットフィールド等を用いてそもそもの量を減らす
					→送るタイミングを考慮する
						毎フレーム送る必要のないものは暇なときに送る
UI系←もしかしたら、プロジェクト用のツールを作る必要性が出てくる

実は多分ほとんど会社の自社製のツールがある。
	なので、ツールを作るというお仕事もある
	①データを作るツール(DCCツール)
		●●エディタと呼ばれるもの
			既存のもの
				PhotoShopやBlenderなどもこれにあたる。DCCというツール
				マップエディタ
				配置ツール
				内部的にスクリプトを使えば出力フォーマットも変更可能
			ゲーム特有のもの
				アクションツール(あたり矩形を付けるツール)
						自分のプログラムにハードコードしたくない
				とはいえ「ツールのみ」で就活するのはちょっとお勧めしない
	②データを加工するツール
		PhotoshopやBlenderなどが出力したデータをゲーム用に加工する
			ゲーム用の情報を付加する
			当たり判定などを3Dデータに付加する(データの付加)
			余計なデータの削除(FBXは冗長→カットしてデータを小さく)
			json→バイナリに変換(読みやすい形に変える)
	③データを管理するツール
		Perfoceや、Gitとか
		データをまとめるツール(FreeTexturePackerとか)
		
ゲーム業界でしれっと足りない人材
①インフラ
	社内サーバや社外サーバのエンジニア
	今治先生の授業でいろいろやってると思います。
	
	サーバは基本的にはLinuxが使用されています。
	LinuxはもともとUnixというのがあって、Minixをどっかの大学の先生が作って
	それをもとにリーナスがLinuxを作った。
	
	で、なぜか、Lnuxにはたくさんのディストリビュータが出てきた。
	その中でもビジネスに使われるようになってきて、場合によっては有料に
	なったものなどがある。
	
	Ubuntu
	CentOS×
	RedHat(有料)
	があります。
	で、実質Ubuntuが覇権を握っている状態
	
	UbuntuもGUIあり版となし版があります。
	Ubuntuは基本的にCUIです。コマンドラインしかありません
	しかし、Xwindowsシステムを持つものもあります。現在はWSLでWindowsから
	操作できるので、XWindowシステムも影が薄くなっています。
	(AndoroidOSもLinuxベース)
	
	実際に使うには、Ubuntu単品じゃだめで、様々なサーバをインストールします
	①Webサーバ(PHP対応)
	
	
②ツールも





