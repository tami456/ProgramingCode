UMLの読み方
※PlnatUML表記です
A <|-- B
これは、BはAから継承しているという意味です
A -- C : AとCは「関連がある(双方向の可能性)」
A <-- C : CはAと「関連している(CからAの単方向)」

このとき、特に下の時には、具体的に何を意味するのか
というと、CがAの参照や実態を持っていて(もしくは引数として)
ともかくCがAのメソッドを呼び出すことを示している

少しややこしいのが
集約とコンポジション

C *-- D : contains
D o-- E : aggregation

どちらも、片方の参照をいくつか所持していると言うことを
表します
なお、
*やoがついているほうが所有者です

「クラス図を書かされたけど、よくわからない」→実装のやり方がわからない
※クラス図に慣れてない人用の手順
①まず、書かれているクラスを作ろう！(何も考えない)
	class Enemy{};
②次に<|--の関係になってるのを見つけたら、継承しよう
	(たいていの場合は基底クラスが純粋仮想クラス)
	親クラスになったクラスのデストラクタ、その他の関数にvirtualをつけよう
		可能なら=0にして純粋仮想関数にしておこう
	子クラスになったクラスは : public 親クラスしよう
		親クラスの関数をvirtual 〇 Function(●) override;しよう
		
③ ◇--などで、集約やコンポジション関係にあるものは所有者なので
	1対多になっている場合は、std::list<Enemy*>などで、所有の準備をしよう

④もし、クラス図に関数名等まで、記載されていればそれを実行する
	-Function() 赤■ならprivate;
	+Function() 緑■ならpublic;
	#Function() 黄色■ならprotected;
⑤あとは、ゲームの内容に合うように中身を実装していく


「継承より委譲を使おう」という言葉の意味について
そもそも、継承には思想的に二つの意味があります

①機能的継承
②インターフェース継承

①の例としては携帯電話を継承してカメラ付携帯電話にする
元の機能を再実装するのは無駄なので継承しよう
携帯電話<|--カメラ付携帯電話

これはあまりよくない・・・
(理由は携帯電話の仕様変更にカメラ付携帯電話が振り回される)

委譲というのは、カメラ付携帯電話の中に
携帯電話を内包しておいて、各関数は内包した携帯電話の
関数を呼び出すことにする。

class CellPhone{
	public:
		void Call();
		void Receive();
};

//継承
class CameraPhone : public CellPhone{
};

//委譲
class CameraPhone{
	private:
		CellPhone cell_;
	public:
		void Shoot();
		void Call(){
			cell_.Call();
		}
		void Receive(){
			cell_.Receive();
		}
};
なので、委譲というのはhasの関係です
CameraPhone o-- CellPhoneの関係です。


ですが、この場合CameraPhoneをCellPhoneとして扱うことはできません
→ポリモフィズムができない

そもそも、インターフェース継承を考慮する場合は設計思想が違う
//基底クラス
class Phone{
	public:
		virtual void Call() = 0;
};

class CellPhone : public Phone{

};

class CameraPhone : public Phone{
	private:
		CellPhone cell_;
	public:
		virtual void Call()override;
};


「継承より委譲を使おう」に関して、よくあるのが
2つのクラスから継承したクラスを作ろうという場合

「Aクラスの機能とBクラスの機能を両方持ちたい」なんていう場合
ほぼ100パーセント委譲にすべき

class C : public A , public B{
}

特に機能の継承として、こういうのはやめよう。

シングルトンを作るときの注意点
①そもそも、シングルトンは「お行儀のいいグローバル変数」
②絶対に2つ以上インスタンスを作らせないように
コンストラクタをprivateに作るだけで安心してると
auto instance = Singleton::GetInstance();
が通ってしまいます。

内部的に「暗黙のコピーコンストラクタ」がpublicになっており
これにより、新しいインスタンスができてしまいます

対策としては、コピーコンストラクタを明示的に

①
②
③力全の入力内容をlastStateにコピーする

vecrtorや、mapを=で代入すると、構造体の代入のような

int vec = {1,2,3,4,5}

int& p = vec[2];
pは3ですよね

vec = {1,3,5,7,9};
このときpはどうなる

mapやunordered_mapの[]はoperator[]なので、内部的に
このような処理になっています。

VALUE& operator[](KEY key)
{
	if(keyが存在したら)
	{
		return keyに対応する値の参照
	}
	else
	{
		insert(key);すくなくともここでconstは効かない
		return keyに対する値の参照
	}
}

→operator[]を呼び出した時点でconst関数の中では
使えません。

charとwchar_tの違い
文字列表現について知っていますか？

char : SJIS
wchar_t: Unicode











