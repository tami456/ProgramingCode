ファイルのロードについて…
基本的には処理落ちがないようにしたい

ロード中も処理落ちがないようにしたい。
ファイルアクセス>>GPU転送メモリ管理・解放>etc...
LoadGraph
MV1LoadModel

で、処理落ちが発生する地修多羅時事
ともかくファイルが重い。何が重いのか
①開くのが重い
②読むのが重い
③閉じるのが重い
なので、まず、手っ取り早くロードを減らすには、
ファイルをまとめてしまうという手があります。
1.FreeTexturePackerのように画像をアトラス化する
	実はグラボ内部で、ロードしたテクスチャは2^nに
	されている。なので、特に2D画像の場合は
	ツールを使ってまとめておいたほうがVRAM消費量も
	減らせる。
	(ただしこの手は2D画像でしか使えません)
2.ファイルがすべてを「アーカイブ化」(1つのファイルに)する
	ツールがDxLibの中にあります。
	それ以外にもなるべく外部のツールを使うことを心掛けて
	置きましょう。時間がないので

	内部的にはfopenは1回だけ行われていると考えられる。
	次に、ファイル指定したときに、内部でファイル名で
	テーブルが作られていて、その名前によって、実際の
	データが書き込まれている場所(アドレス)を特定して
	そのハンドルを返している。
	
	このため①と③のコストが低減でできると考えられる。
	この辺自分でやりたい人は、実はそんなに難しくないので

	ヘッダ：パステーブル(パスーファイルからの先頭オフセット)
	データ：データの塊

これでも処理落ちしたりする。それがロードというものです。
なので、ロードを非同期ロードに変更する。

とにかくnowloadingを動かしながら、ロードを待ちたい。
そういった場合に使えるのが、DxLib::SetAsyncLoadGraphです。これにtrueを設定しておくと
LoadGraph関数が、即時復帰関数になります。(本来は官僚復帰関数です。)
MV1LoadModel関数もそうなります。

sstream
→stringstream

iostreamの親戚で、文字列に対してストリーム操作ができる。


コマンドラインツールの特殊な使い方について
コマンドラインの出力をファイルに出力したい

C++で状態遷移を表すテクニック
①Stateパターン
	Scene<|-TitleScene
	Scene<|-GameScene
	Scene<|-GameOverScene
②メンバ関数で状態によって、現在実行すべき関数を切り替え
	
