HDDからファイルを読むとは言いますが、実際の仕組みは
①プロぐらっむからOSにファイルパスを渡す
②OSのファイルシステムが「どのセクタにあるのか探す」
	実はファイルはセクタごとに分かれている
	(場合によりけり)
	どのセクタの、nオフセットのmサイズ分だけ
	メモリにコピーしますよ…的なことやってる
	→その証拠に、実際のサイズとディスク上のサイズは
	だいぶ違う
③レコードの針を特定のセクタに動かして、ファイルの
	場所までオフセットする
④内部の読み取り(fread)：シークバーを動かして
	必要な部分をメモリ上にコピーします
⑤ファイルを閉じてシークバーをフリーにします(fclose)

これらのことから、ファイルはなるべく1つにまとめたほうがいい
	1.ファイルが分かれるとサイズがでかくなる
	2.ファイルオープンの時点でOSに負担かけてるのdえ重くなる
なるべく一つにまとめたほうがいいです。
DxLibでは、手っ取り早くフォルダごと1ファイルにまとめる仕組みがあり
DxArchiveというツールを使います。
Tool\DxArchive
まとめるにはDxaEncode.exeを使用します。
1.使い方が簡単
	i.ドラッグ&ドロップでOK
	ii.読みだす時もフォルダにアクセスするように読める
	iii.暗号化にもなる

C#はガベージコレクションでメモリ管理しています。
メリット：自分でメモリ管理しなくていい
デメリット：自分でメモリの解放のタイミングを指定できない
			ガベージコレクタ(メモリ解放屋)は、VMの上で定期的に
			やってくるお掃除屋さんで、定時になったらガーっと回収して
			ガーっと開放します。
			→1回のメモリ解放量が多くなる
			メモリの解放は結構重い
			この2つの要因の組み合わせによって処理落ちが発生する
			ガベージコレクタの発動タイミングを制御できない。
			
			
VMっていうか.Netの仕組み…VM的な仕組みにCLIから作ったAssemblyを流して
		順次実行するという仕組み。遅そうですが現代は最適化されててネイティブと
		変わらないくらいに早い
		
		


encode：暗号化(zipもそうですが、難読化する)
decode：復合化(それをもとに戻す)

encrypt：暗号化(だいぶ勝ちで暗号化する)
decrypt：復合化(それをもとに戻す)

en-●●：何かに対して、作用する動詞
de-●●：enで行った作用をもとに戻す





非同期ロード(DxLibではSetUseAsyncLoadフラグを立てるだけでOK)
内部でワーカースレッドとスレッドキューが作動しています。

①ワーカースレッド：別スレッドでお仕事して、お仕事が終わったら消滅
②スレッドキュー：スレッド実行の待ち行列のこと

DxLibではhandled-pointerパターンというのを採用しています。
ファイルは場合によってはロードが完了するまではリソースのアドレスが
確定しないことがあります

実際のデータのアドレスと、それを示すチケット番号wp分けてワンクッション
置くことで、末ロードのデータにアクセスしたり、違う番地にアクセスする
ことを防いでいきます


つまり非同期ロードの場合、LoadGraphをコールしても全然ロードされませんが
まず、引換券としての「ハンドル」を渡してあげることで、ロード完了後に
画像データ等にスムーズにアクセスできるようになっています。
末ロードの場合
DrawGraphやMV1DrawModelがコールされても戦闘でリターンされて、ただ表示されない
という結果になります(実データでこれをやるｔｐメモリアクセスエラーになります)


で、今回はNowLoadingを表示したいと思うので、すべてのロードが完了したことを
確認できるまで、NowLoadingを表示しています

getAsyncLoadNum()はロードスレッドの中にあるワーカースレッドの数を返す
こいつがゼロになったら、すべてのロードが完了しましたよ～。ということです。

次はさらにもう一歩進めて、kン度はVRAMの消費を抑えましょう
テクスチャを一つにまとめることで、VRAMの消費を抑えることができます。

今回の話は2Dに関する話ではありませんが3DでもUIやビルボードとかに
2Dを用いる

VRAM上のテクスチャ
例えば、15

テクスチャ
ただし…
ぜ～んぶ
だいたい
スマホなら




それをまとめるツールとして「テクスチャトラス」TextyuterAtlas
まとめたテクスチャと、それの配置情報をセットで「テクスチャアトラス」
といいます。

FreeTexturePackerは画像とともに
JSONファイルを吐き出します
JSONとはJavaScriptObjectNotationの略でJavaScriptに合わせた
データ形式で、構造体のシリアライズ・デシリアライズに使われる
JSONがはやる以前はXMLという形式がメジャーだった

シリアライズ：構造体の内容をまんまJSONファイルに出力すること
デシリアライズ：JSONの内容を構造体にすること

ですが、これは元となった構造体wがわからないと使えない

今回は、「ただの改装データ」として読み込みます。
System Text.JSON












































