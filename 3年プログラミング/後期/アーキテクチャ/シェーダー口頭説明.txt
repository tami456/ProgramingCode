・ピクセルシェーダーの理解説明

1. ピクセル単位の計算: ピクセルシェーダーは画面上の各ピクセルに対して個別に計算を行います。
これは、各ピクセルの色や材質、照明などを調整するために非常に効果的です。

2. シェーダープログラム: ピクセルシェーダーはプログラムであり、
通常はグラフィックスAPI（例: DirectXやOpenGL）によって管理されます。
開発者はこのプログラムを記述し、グラフィックスパイプラインの特定のステージに挿入できます。

3. 色計算: ピクセルシェーダーは、ピクセルの色を計算するために使用されます。
これには、テクスチャマッピング、ライティング、影の計算、法線マッピングなどが含まれます。
結果的に、シーン内のオブジェクトがどのように見えるかを制御できます。

4. シェーディング言語: ピクセルシェーダーを記述するためには、
シェーディング言語（通常はHLSLやGLSLなど）を使用します。
この言語は、ハードウェアアクセラレーションされたグラフィックスプロセッサ（GPU）上で実行され、
高速な演算を実現します。

5. リアルタイムグラフィックス: ピクセルシェーダーは、
リアルタイムの3Dグラフィックスアプリケーションで特に重要です。
これにより、ゲームやシミュレーションなどで、
高品質のビジュアルエフェクトやリアルタイムのレンダリングが実現できます。

・処理速度面アプローチ
if (srcCol.a < 0.01f)
	{
		//描画しない(アルファテスト)
		discard;
	}
透明度0.01以下はほぼ透明みたいなものなので表示させる必要がない
→処理速度上がる

・クラス化メリット/デメリット
・メリット
書かないといけないコードが短くなった
→新しく作ったシェーダーを表示させるのが簡単になった

・デメリット
複雑化する

頂点シェーダークラス化
新しく頂点シェーダー用のクラスを作る
VertexMaterial VertexRenderer
VertexMaterialのInitでデータの初期化をする
VertexMaterialで初期化したものをGet関数でVerteXRendererで呼び出せるようにする。
VertexRendererのInitで頂点の初期化をしてDrawで描画処理をさせる。
GameSceneのInitでVertexMaterialをmake_uniqueで呼んで引数を渡す
GameSceneのInitでVertexMaterialのInitを呼んで引数を渡す
DrawでVertexRendererのDrawを呼び出す。
