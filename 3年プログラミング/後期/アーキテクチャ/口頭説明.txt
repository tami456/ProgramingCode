生ポメリット

1. 自分がしたいときにメモリの割り当てと開放ができる。

2. オーバーヘッドが起こらない

デメリット

1. 解放し忘れによるメモリリーク

2. 重複解放による強制終了

スマポメリット

1. メモリの割り当てと解放を自動的にやってくれる。

2. 所有権を明示的に表現するから、
   どのスマートポインタがリソースを所有しているかがわかりやすくなる

デメリット

1. オーバーヘッドがおきるかもしれない

2. std::shared_ptrを使いすぎたときに、循環参照が発生する可能性がある

ポインタ型と参照型の違い

1. ヌル値の取り扱い:
   - ポインタ型: ポインタはヌルポインタを持つことができる
   
   - 参照型: ヌルポインタを持たない

2. 再代入:
   - ポインタ型: ポインタは再代入ができる
   
   - 参照型: 参照は一度初期化されたら、再代入できません。

使い分け

1. 動的メモリ管理: ヒープ上にオブジェクトを動的に確保し、
   手動で解放する必要がある場合に生ポインタを使用します。

2. メモリ管理の自動化: スマートポインタを使用して、
   メモリ管理を自動化し、メモリリークを回避します。
   `std::unique_ptr`は所有権の一時的な移動の時に使用し、
   `std::shared_ptr`は共有リソースの管理の時に使用します。
   `std::weak_ptr`は循環参照を防ぐ時に使用します。

3. オブジェクトの別名: オブジェクトに別名を付けて、
   シンプルなコードを書く時に、参照を使う。
  